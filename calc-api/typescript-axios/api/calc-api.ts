// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * Calculator Service
 * HTTP service for adding numbers, a goa teaser
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

/**
 * CalcApi - axios parameter creator
 * @export
 */
export const CalcApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add calc
         * @param {number} a Left operand
         * @param {number} b Right operand
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcAdd(a: number, b: number, options: any = {}): RequestArgs {
            // verify required parameter 'a' is not null or undefined
            if (a === null || a === undefined) {
                throw new RequiredError('a','Required parameter a was null or undefined when calling calcAdd.');
            }
            // verify required parameter 'b' is not null or undefined
            if (b === null || b === undefined) {
                throw new RequiredError('b','Required parameter b was null or undefined when calling calcAdd.');
            }
            const localVarPath = `/add/{a}/{b}`
                .replace(`{${"a"}}`, encodeURIComponent(String(a)))
                .replace(`{${"b"}}`, encodeURIComponent(String(b)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary multiple calc
         * @param {number} a Left operand
         * @param {number} b Right operand
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcMultiple(a: number, b: number, options: any = {}): RequestArgs {
            // verify required parameter 'a' is not null or undefined
            if (a === null || a === undefined) {
                throw new RequiredError('a','Required parameter a was null or undefined when calling calcMultiple.');
            }
            // verify required parameter 'b' is not null or undefined
            if (b === null || b === undefined) {
                throw new RequiredError('b','Required parameter b was null or undefined when calling calcMultiple.');
            }
            const localVarPath = `/multiple/{a}/{b}`
                .replace(`{${"a"}}`, encodeURIComponent(String(a)))
                .replace(`{${"b"}}`, encodeURIComponent(String(b)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CalcApi - functional programming interface
 * @export
 */
export const CalcApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary add calc
         * @param {number} a Left operand
         * @param {number} b Right operand
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcAdd(a: number, b: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number> {
            const localVarAxiosArgs = CalcApiAxiosParamCreator(configuration).calcAdd(a, b, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary multiple calc
         * @param {number} a Left operand
         * @param {number} b Right operand
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcMultiple(a: number, b: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number> {
            const localVarAxiosArgs = CalcApiAxiosParamCreator(configuration).calcMultiple(a, b, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CalcApi - factory interface
 * @export
 */
export const CalcApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary add calc
         * @param {number} a Left operand
         * @param {number} b Right operand
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcAdd(a: number, b: number, options?: any) {
            return CalcApiFp(configuration).calcAdd(a, b, options)(axios, basePath);
        },
        /**
         * 
         * @summary multiple calc
         * @param {number} a Left operand
         * @param {number} b Right operand
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calcMultiple(a: number, b: number, options?: any) {
            return CalcApiFp(configuration).calcMultiple(a, b, options)(axios, basePath);
        },
    };
};

/**
 * CalcApi - interface
 * @export
 * @interface CalcApi
 */
export interface CalcApiInterface {
    /**
     * 
     * @summary add calc
     * @param {number} a Left operand
     * @param {number} b Right operand
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalcApiInterface
     */
    calcAdd(a: number, b: number, options?: any): AxiosPromise<number>;

    /**
     * 
     * @summary multiple calc
     * @param {number} a Left operand
     * @param {number} b Right operand
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalcApiInterface
     */
    calcMultiple(a: number, b: number, options?: any): AxiosPromise<number>;

}

/**
 * CalcApi - object-oriented interface
 * @export
 * @class CalcApi
 * @extends {BaseAPI}
 */
export class CalcApi extends BaseAPI implements CalcApiInterface {
    /**
     * 
     * @summary add calc
     * @param {number} a Left operand
     * @param {number} b Right operand
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalcApi
     */
    public calcAdd(a: number, b: number, options?: any) {
        return CalcApiFp(this.configuration).calcAdd(a, b, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary multiple calc
     * @param {number} a Left operand
     * @param {number} b Right operand
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalcApi
     */
    public calcMultiple(a: number, b: number, options?: any) {
        return CalcApiFp(this.configuration).calcMultiple(a, b, options)(this.axios, this.basePath);
    }

}
